
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 29 16:09:24 GMT 2012
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 29 16:09:24 GMT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\010\010\000\002\005\005\000\002\005\002\000" +
    "\002\012\005\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\007" +
    "\012\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\004\000\002\022\002\000\002\024\005\000\002" +
    "\025\005\000\002\025\002\000\002\023\006\000\002\027" +
    "\005\000\002\027\004\000\002\027\002\000\002\026\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\002\000\002\014\006\000\002\014\010" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\016\006\000\002\016\010\000\002" +
    "\015\006\000\002\015\010\000\002\006\006\000\002\006" +
    "\010\000\002\017\006\000\002\017\011\000\002\030\004" +
    "\000\002\030\002\000\002\031\010\000\002\031\011\000" +
    "\002\031\011\000\002\031\007\000\002\031\006\000\002" +
    "\032\006\000\002\032\003\000\002\034\004\000\002\034" +
    "\002\000\002\035\003\000\002\035\006\000\002\035\005" +
    "\000\002\035\010\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\006\000\002\033\011\000\002\033\007\000\002\033" +
    "\006\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\006\000\002\033\006\000\002" +
    "\033\004\000\002\033\006\000\002\033\004\000\002\037" +
    "\005\000\002\037\002\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\012\024\ufffc\025\ufffc\034\ufffc\070\ufffc\001" +
    "\002\000\004\002\341\001\002\000\012\024\014\025\020" +
    "\034\006\070\015\001\002\000\014\006\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\070\uffd7\001\002\000\012\024\ufffe\025\ufffe" +
    "\034\ufffe\070\ufffe\001\002\000\012\024\uffe1\025\uffe1\034" +
    "\uffe1\070\uffe1\001\002\000\012\024\uffff\025\uffff\034\uffff" +
    "\070\uffff\001\002\000\012\024\ufffd\025\ufffd\034\ufffd\070" +
    "\ufffd\001\002\000\004\002\001\001\002\000\004\070\226" +
    "\001\002\000\004\043\047\001\002\000\012\024\uffdd\025" +
    "\uffdd\034\uffdd\070\uffdd\001\002\000\012\024\uffe0\025\uffe0" +
    "\034\uffe0\070\uffe0\001\002\000\004\070\023\001\002\000" +
    "\012\024\uffdf\025\uffdf\034\uffdf\070\uffdf\001\002\000\012" +
    "\024\uffde\025\uffde\034\uffde\070\uffde\001\002\000\004\043" +
    "\024\001\002\000\004\070\025\001\002\000\004\043\034" +
    "\001\002\000\006\016\ufff9\033\030\001\002\000\004\016" +
    "\033\001\002\000\004\070\025\001\002\000\006\016\ufff9" +
    "\033\030\001\002\000\004\016\ufffa\001\002\000\012\024" +
    "\ufffb\025\ufffb\034\ufffb\070\ufffb\001\002\000\022\004\046" +
    "\005\041\021\035\022\045\023\037\026\040\027\042\070" +
    "\043\001\002\000\014\016\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\042\uffd4\001\002\000\006\016\ufff8\033\ufff8\001\002\000" +
    "\014\016\uffd2\032\uffd2\033\uffd2\034\uffd2\042\uffd2\001\002" +
    "\000\010\016\ufff6\032\ufff6\033\ufff6\001\002\000\010\016" +
    "\ufff3\032\ufff3\033\ufff3\001\002\000\010\016\ufff5\032\ufff5" +
    "\033\ufff5\001\002\000\010\016\ufff4\032\ufff4\033\ufff4\001" +
    "\002\000\010\016\ufff7\032\ufff7\033\ufff7\001\002\000\014" +
    "\016\uffd3\032\uffd3\033\uffd3\034\uffd3\042\uffd3\001\002\000" +
    "\014\016\uffd1\032\uffd1\033\uffd1\034\uffd1\042\uffd1\001\002" +
    "\000\022\004\046\005\051\021\035\022\045\023\037\026" +
    "\050\027\052\070\053\001\002\000\006\016\222\042\223" +
    "\001\002\000\006\016\216\042\217\001\002\000\006\016" +
    "\212\042\213\001\002\000\006\016\205\042\206\001\002" +
    "\000\006\016\055\042\056\001\002\000\024\006\uffd6\024" +
    "\uffd6\025\uffd6\034\uffd6\035\uffd6\037\uffd6\040\uffd6\061\uffd6" +
    "\070\uffd6\001\002\000\032\011\065\013\060\017\057\031" +
    "\073\057\061\060\064\065\071\066\072\067\062\070\066" +
    "\071\067\072\063\001\002\000\034\011\065\013\060\017" +
    "\057\020\201\031\073\057\061\060\064\065\071\066\072" +
    "\067\062\070\066\071\067\072\063\001\002\000\004\031" +
    "\165\001\002\000\054\010\uffa2\012\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\020\uffa2\032\uffa2\033\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\062\uffa2\063\uffa2\001\002\000\054\010" +
    "\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\032\uff9f" +
    "\033\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\062\uff9f" +
    "\063\uff9f\001\002\000\054\010\uff9d\012\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\020\uff9d\032\uff9d\033\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\062\uff9d\063\uff9d\001\002\000\054" +
    "\010\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\032" +
    "\uffa1\033\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\062" +
    "\uffa1\063\uffa1\001\002\000\034\011\065\012\162\013\060" +
    "\017\057\031\073\057\061\060\064\065\071\066\072\067" +
    "\062\070\066\071\067\072\063\001\002\000\062\010\uffbd" +
    "\012\uffbd\014\uffbd\015\uffbd\016\uffbd\017\146\020\uffbd\031" +
    "\147\032\uffbd\033\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\054\010\uff9e" +
    "\012\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\032\uff9e\033" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\062\uff9e\063" +
    "\uff9e\001\002\000\044\010\111\014\105\015\103\016\145" +
    "\044\117\045\113\046\115\047\120\050\101\051\114\052" +
    "\106\053\121\054\116\055\112\056\107\062\102\063\104" +
    "\001\002\000\032\011\065\013\060\017\057\031\073\057" +
    "\061\060\064\065\071\066\072\067\062\070\066\071\067" +
    "\072\063\001\002\000\054\010\uffa0\012\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\020\uffa0\032\uffa0\033\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\062\uffa0\063\uffa0\001\002\000\032" +
    "\011\065\013\060\017\057\031\073\057\061\060\064\065" +
    "\071\066\072\067\062\070\066\071\067\072\063\001\002" +
    "\000\056\010\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\020" +
    "\uffa3\032\uffa3\033\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\062\uffa3\063\uffa3\064\075\001\002\000\004\070\076" +
    "\001\002\000\062\010\uffbb\012\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\077\020\uffbb\032\uffbb\033\uffbb\042\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\001\002\000\032\011\065\013\060\017\057\031\073\057" +
    "\061\060\064\065\071\066\072\067\062\070\066\071\067" +
    "\072\063\001\002\000\044\010\111\014\105\015\103\020" +
    "\110\044\117\045\113\046\115\047\120\050\101\051\114" +
    "\052\106\053\121\054\116\055\112\056\107\062\102\063" +
    "\104\001\002\000\032\011\065\013\060\017\057\031\073" +
    "\057\061\060\064\065\071\066\072\067\062\070\066\071" +
    "\067\072\063\001\002\000\032\011\065\013\060\017\057" +
    "\031\073\057\061\060\064\065\071\066\072\067\062\070" +
    "\066\071\067\072\063\001\002\000\032\011\065\013\060" +
    "\017\057\031\073\057\061\060\064\065\071\066\072\067" +
    "\062\070\066\071\067\072\063\001\002\000\032\011\065" +
    "\013\060\017\057\031\073\057\061\060\064\065\071\066" +
    "\072\067\062\070\066\071\067\072\063\001\002\000\032" +
    "\011\065\013\060\017\057\031\073\057\061\060\064\065" +
    "\071\066\072\067\062\070\066\071\067\072\063\001\002" +
    "\000\032\011\065\013\060\017\057\031\073\057\061\060" +
    "\064\065\071\066\072\067\062\070\066\071\067\072\063" +
    "\001\002\000\032\011\065\013\060\017\057\031\073\057" +
    "\061\060\064\065\071\066\072\067\062\070\066\071\067" +
    "\072\063\001\002\000\060\010\uffba\012\uffba\014\uffba\015" +
    "\uffba\016\uffba\020\uffba\032\uffba\033\uffba\042\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\062\uffba\063\uffba\064\uffba" +
    "\001\002\000\032\011\065\013\060\017\057\031\073\057" +
    "\061\060\064\065\071\066\072\067\062\070\066\071\067" +
    "\072\063\001\002\000\032\011\065\013\060\017\057\031" +
    "\073\057\061\060\064\065\071\066\072\067\062\070\066" +
    "\071\067\072\063\001\002\000\032\011\065\013\060\017" +
    "\057\031\073\057\061\060\064\065\071\066\072\067\062" +
    "\070\066\071\067\072\063\001\002\000\032\011\065\013" +
    "\060\017\057\031\073\057\061\060\064\065\071\066\072" +
    "\067\062\070\066\071\067\072\063\001\002\000\032\011" +
    "\065\013\060\017\057\031\073\057\061\060\064\065\071" +
    "\066\072\067\062\070\066\071\067\072\063\001\002\000" +
    "\032\011\065\013\060\017\057\031\073\057\061\060\064" +
    "\065\071\066\072\067\062\070\066\071\067\072\063\001" +
    "\002\000\032\011\065\013\060\017\057\031\073\057\061" +
    "\060\064\065\071\066\072\067\062\070\066\071\067\072" +
    "\063\001\002\000\032\011\065\013\060\017\057\031\073" +
    "\057\061\060\064\065\071\066\072\067\062\070\066\071" +
    "\067\072\063\001\002\000\032\011\065\013\060\017\057" +
    "\031\073\057\061\060\064\065\071\066\072\067\062\070" +
    "\066\071\067\072\063\001\002\000\034\010\uffab\012\uffab" +
    "\016\uffab\020\uffab\032\uffab\033\uffab\044\117\045\113\046" +
    "\115\047\uffab\050\uffab\062\102\063\104\001\002\000\054" +
    "\010\111\012\uffb4\014\105\015\103\016\uffb4\020\uffb4\032" +
    "\uffb4\033\uffb4\044\117\045\113\046\115\047\uffb4\050\101" +
    "\051\114\052\106\053\121\054\116\055\112\056\107\062" +
    "\102\063\104\001\002\000\054\010\uffb5\012\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\020\uffb5\032\uffb5\033\uffb5\044\117\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\062\uffb5\063\uffb5\001\002\000" +
    "\034\010\uffaa\012\uffaa\016\uffaa\020\uffaa\032\uffaa\033\uffaa" +
    "\044\117\045\113\046\115\047\uffaa\050\uffaa\062\102\063" +
    "\104\001\002\000\054\010\uffb8\012\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\020\uffb8\032\uffb8\033\uffb8\044\117\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\062\uffb8\063\uffb8\001\002\000\034\010" +
    "\uffad\012\uffad\016\uffad\020\uffad\032\uffad\033\uffad\044\117" +
    "\045\113\046\115\047\uffad\050\uffad\062\102\063\104\001" +
    "\002\000\054\010\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\020\uffb9\032\uffb9\033\uffb9\044\117\045\uffb9\046\115\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\062\uffb9\063\104\001\002\000\034\010\uffb1\012" +
    "\uffb1\016\uffb1\020\uffb1\032\uffb1\033\uffb1\044\117\045\113" +
    "\046\115\047\uffb1\050\uffb1\062\102\063\104\001\002\000" +
    "\054\010\uffa9\012\uffa9\014\105\015\103\016\uffa9\020\uffa9" +
    "\032\uffa9\033\uffa9\044\117\045\113\046\115\047\uffa9\050" +
    "\uffa9\051\114\052\106\053\121\054\116\055\112\056\107" +
    "\062\102\063\104\001\002\000\034\010\uffb0\012\uffb0\016" +
    "\uffb0\020\uffb0\032\uffb0\033\uffb0\044\117\045\113\046\115" +
    "\047\uffb0\050\uffb0\062\102\063\104\001\002\000\034\010" +
    "\uffac\012\uffac\016\uffac\020\uffac\032\uffac\033\uffac\044\117" +
    "\045\113\046\115\047\uffac\050\uffac\062\102\063\104\001" +
    "\002\000\034\010\uffaf\012\uffaf\016\uffaf\020\uffaf\032\uffaf" +
    "\033\uffaf\044\117\045\113\046\115\047\uffaf\050\uffaf\062" +
    "\102\063\104\001\002\000\054\010\uffb6\012\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\032\uffb6\033\uffb6\044\117\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\062\uffb6\063\uffb6\001\002\000" +
    "\034\010\uffae\012\uffae\016\uffae\020\uffae\032\uffae\033\uffae" +
    "\044\117\045\113\046\115\047\uffae\050\uffae\062\102\063" +
    "\104\001\002\000\054\010\uffb7\012\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\020\uffb7\032\uffb7\033\uffb7\044\117\045\uffb7\046" +
    "\115\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\062\uffb7\063\104\001\002\000\054\010" +
    "\111\012\uffb3\014\105\015\103\016\uffb3\020\uffb3\032\uffb3" +
    "\033\uffb3\044\117\045\113\046\115\047\uffb3\050\uffb3\051" +
    "\114\052\106\053\121\054\116\055\112\056\107\062\102" +
    "\063\104\001\002\000\044\010\111\014\105\015\103\032" +
    "\143\044\117\045\113\046\115\047\120\050\101\051\114" +
    "\052\106\053\121\054\116\055\112\056\107\062\102\063" +
    "\104\001\002\000\054\010\uffa8\012\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\020\uffa8\032\uffa8\033\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\062\uffa8\063\uffa8\001\002\000\054\010" +
    "\uffb2\012\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\032\uffb2" +
    "\033\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\062\uffb2" +
    "\063\uffb2\001\002\000\024\006\uffd5\024\uffd5\025\uffd5\034" +
    "\uffd5\035\uffd5\037\uffd5\040\uffd5\061\uffd5\070\uffd5\001\002" +
    "\000\032\011\065\013\060\017\057\031\073\057\061\060" +
    "\064\065\071\066\072\067\062\070\066\071\067\072\063" +
    "\001\002\000\034\011\065\013\060\017\057\031\073\032" +
    "\uffbe\057\061\060\064\065\071\066\072\067\062\070\066" +
    "\071\067\072\063\001\002\000\004\032\156\001\002\000" +
    "\046\010\111\014\105\015\103\032\uff96\033\153\044\117" +
    "\045\113\046\115\047\120\050\101\051\114\052\106\053" +
    "\121\054\116\055\112\056\107\062\102\063\104\001\002" +
    "\000\004\032\uffbf\001\002\000\032\011\065\013\060\017" +
    "\057\031\073\057\061\060\064\065\071\066\072\067\062" +
    "\070\066\071\067\072\063\001\002\000\054\010\111\012" +
    "\uff96\014\105\015\103\016\uff96\020\uff96\032\uff96\033\153" +
    "\044\117\045\113\046\115\047\120\050\101\051\114\052" +
    "\106\053\121\054\116\055\112\056\107\062\102\063\104" +
    "\001\002\000\012\012\uff97\016\uff97\020\uff97\032\uff97\001" +
    "\002\000\054\010\uff9c\012\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\020\uff9c\032\uff9c\033\uff9c\044\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\062\uff9c\063\uff9c\001\002\000\044\010\111\014" +
    "\105\015\103\020\160\044\117\045\113\046\115\047\120" +
    "\050\101\051\114\052\106\053\121\054\116\055\112\056" +
    "\107\062\102\063\104\001\002\000\060\010\uffbc\012\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\020\uffbc\032\uffbc\033\uffbc\042" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\001\002\000\046\010\111\012\uff96\014\105" +
    "\015\103\033\153\044\117\045\113\046\115\047\120\050" +
    "\101\051\114\052\106\053\121\054\116\055\112\056\107" +
    "\062\102\063\104\001\002\000\054\010\uff98\012\uff98\014" +
    "\uff98\015\uff98\016\uff98\020\uff98\032\uff98\033\uff98\044\uff98" +
    "\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\062\uff98\063\uff98\001\002" +
    "\000\004\012\164\001\002\000\054\010\uff99\012\uff99\014" +
    "\uff99\015\uff99\016\uff99\020\uff99\032\uff99\033\uff99\044\uff99" +
    "\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\062\uff99\063\uff99\001\002" +
    "\000\010\017\166\070\167\072\170\001\002\000\034\011" +
    "\065\013\060\017\057\020\173\031\073\057\061\060\064" +
    "\065\071\066\072\067\062\070\066\071\067\072\063\001" +
    "\002\000\004\032\172\001\002\000\004\032\171\001\002" +
    "\000\054\010\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4\020" +
    "\uffa4\032\uffa4\033\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\062\uffa4\063\uffa4\001\002\000\054\010\uffa7\012\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\020\uffa7\032\uffa7\033\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\056\uffa7\062\uffa7\063\uffa7\001" +
    "\002\000\004\032\200\001\002\000\046\010\111\014\105" +
    "\015\103\020\uff96\033\153\044\117\045\113\046\115\047" +
    "\120\050\101\051\114\052\106\053\121\054\116\055\112" +
    "\056\107\062\102\063\104\001\002\000\004\020\176\001" +
    "\002\000\004\032\177\001\002\000\054\010\uffa6\012\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\020\uffa6\032\uffa6\033\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\062\uffa6\063\uffa6\001" +
    "\002\000\054\010\uffa5\012\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\020\uffa5\032\uffa5\033\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\062\uffa5\063\uffa5\001\002\000\054\010\uff9a\012" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\032\uff9a\033\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\062\uff9a\063\uff9a" +
    "\001\002\000\046\010\111\014\105\015\103\020\uff96\033" +
    "\153\044\117\045\113\046\115\047\120\050\101\051\114" +
    "\052\106\053\121\054\116\055\112\056\107\062\102\063" +
    "\104\001\002\000\004\020\204\001\002\000\054\010\uff9b" +
    "\012\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\032\uff9b\033" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\062\uff9b\063" +
    "\uff9b\001\002\000\024\006\uffca\024\uffca\025\uffca\034\uffca" +
    "\035\uffca\037\uffca\040\uffca\061\uffca\070\uffca\001\002\000" +
    "\032\011\065\013\060\017\057\031\073\057\061\060\064" +
    "\065\071\066\072\067\062\070\066\071\067\072\063\001" +
    "\002\000\046\010\111\014\105\015\103\016\uff96\033\153" +
    "\044\117\045\113\046\115\047\120\050\101\051\114\052" +
    "\106\053\121\054\116\055\112\056\107\062\102\063\104" +
    "\001\002\000\004\016\211\001\002\000\024\006\uffc9\024" +
    "\uffc9\025\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\061\uffc9" +
    "\070\uffc9\001\002\000\024\006\uffce\024\uffce\025\uffce\034" +
    "\uffce\035\uffce\037\uffce\040\uffce\061\uffce\070\uffce\001\002" +
    "\000\032\011\065\013\060\017\057\031\073\057\061\060" +
    "\064\065\071\066\072\067\062\070\066\071\067\072\063" +
    "\001\002\000\044\010\111\014\105\015\103\016\215\044" +
    "\117\045\113\046\115\047\120\050\101\051\114\052\106" +
    "\053\121\054\116\055\112\056\107\062\102\063\104\001" +
    "\002\000\024\006\uffcd\024\uffcd\025\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\061\uffcd\070\uffcd\001\002\000\024\006" +
    "\uffcc\024\uffcc\025\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc" +
    "\061\uffcc\070\uffcc\001\002\000\032\011\065\013\060\017" +
    "\057\031\073\057\061\060\064\065\071\066\072\067\062" +
    "\070\066\071\067\072\063\001\002\000\044\010\111\014" +
    "\105\015\103\016\221\044\117\045\113\046\115\047\120" +
    "\050\101\051\114\052\106\053\121\054\116\055\112\056" +
    "\107\062\102\063\104\001\002\000\024\006\uffcb\024\uffcb" +
    "\025\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\061\uffcb\070" +
    "\uffcb\001\002\000\024\006\uffd0\024\uffd0\025\uffd0\034\uffd0" +
    "\035\uffd0\037\uffd0\040\uffd0\061\uffd0\070\uffd0\001\002\000" +
    "\032\011\065\013\060\017\057\031\073\057\061\060\064" +
    "\065\071\066\072\067\062\070\066\071\067\072\063\001" +
    "\002\000\044\010\111\014\105\015\103\016\225\044\117" +
    "\045\113\046\115\047\120\050\101\051\114\052\106\053" +
    "\121\054\116\055\112\056\107\062\102\063\104\001\002" +
    "\000\024\006\uffcf\024\uffcf\025\uffcf\034\uffcf\035\uffcf\037" +
    "\uffcf\040\uffcf\061\uffcf\070\uffcf\001\002\000\004\031\227" +
    "\001\002\000\006\032\uffea\070\230\001\002\000\004\043" +
    "\335\001\002\000\004\032\237\001\002\000\006\032\uffe7" +
    "\033\233\001\002\000\004\070\230\001\002\000\004\032" +
    "\uffeb\001\002\000\006\032\uffe7\033\233\001\002\000\004" +
    "\032\uffe8\001\002\000\004\043\240\001\002\000\024\004" +
    "\046\005\243\021\035\022\045\023\037\026\241\027\244" +
    "\030\242\070\245\001\002\000\004\034\ufff0\001\002\000" +
    "\004\034\uffed\001\002\000\004\034\uffec\001\002\000\004" +
    "\034\uffef\001\002\000\004\034\uffee\001\002\000\004\034" +
    "\250\001\002\000\004\034\ufff1\001\002\000\016\006\uffd7" +
    "\035\uffd7\037\uffd7\040\uffd7\061\uffd7\070\uffd7\001\002\000" +
    "\012\024\ufff2\025\ufff2\034\ufff2\070\ufff2\001\002\000\016" +
    "\006\263\035\uffc7\037\262\040\267\061\uffc7\070\270\001" +
    "\002\000\006\035\uffe3\061\254\001\002\000\034\011\065" +
    "\013\060\016\257\017\057\031\073\057\061\060\064\065" +
    "\071\066\072\067\062\070\066\071\067\072\063\001\002" +
    "\000\004\035\256\001\002\000\012\024\uffe6\025\uffe6\034" +
    "\uffe6\070\uffe6\001\002\000\004\035\uffe4\001\002\000\044" +
    "\010\111\014\105\015\103\016\261\044\117\045\113\046" +
    "\115\047\120\050\101\051\114\052\106\053\121\054\116" +
    "\055\112\056\107\062\102\063\104\001\002\000\004\035" +
    "\uffe5\001\002\000\004\031\330\001\002\000\014\006\263" +
    "\034\312\037\262\040\267\070\311\001\002\000\016\006" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\061\uffdc\070\uffdc\001\002" +
    "\000\006\035\uffe2\061\uffe2\001\002\000\016\006\263\035" +
    "\uffc7\037\262\040\267\061\uffc7\070\311\001\002\000\004" +
    "\031\305\001\002\000\014\017\146\031\301\042\uffbd\043" +
    "\047\064\uffbd\001\002\000\016\006\uffd8\035\uffd8\037\uffd8" +
    "\040\uffd8\061\uffd8\070\uffd8\001\002\000\016\006\uffdb\035" +
    "\uffdb\037\uffdb\040\uffdb\061\uffdb\070\uffdb\001\002\000\016" +
    "\006\uffd9\035\uffd9\037\uffd9\040\uffd9\061\uffd9\070\uffd9\001" +
    "\002\000\016\006\uffda\035\uffda\037\uffda\040\uffda\061\uffda" +
    "\070\uffda\001\002\000\006\042\276\064\075\001\002\000" +
    "\032\011\065\013\060\017\057\031\073\057\061\060\064" +
    "\065\071\066\072\067\062\070\066\071\067\072\063\001" +
    "\002\000\044\010\111\014\105\015\103\016\300\044\117" +
    "\045\113\046\115\047\120\050\101\051\114\052\106\053" +
    "\121\054\116\055\112\056\107\062\102\063\104\001\002" +
    "\000\022\006\uffc2\007\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\061\uffc2\070\uffc2\001\002\000\034\011\065\013\060" +
    "\017\057\031\073\032\uffbe\057\061\060\064\065\071\066" +
    "\072\067\062\070\066\071\067\072\063\001\002\000\004" +
    "\032\303\001\002\000\004\016\304\001\002\000\022\006" +
    "\uffc3\007\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\061\uffc3" +
    "\070\uffc3\001\002\000\032\011\065\013\060\017\057\031" +
    "\073\057\061\060\064\065\071\066\072\067\062\070\066" +
    "\071\067\072\063\001\002\000\044\010\111\014\105\015" +
    "\103\032\307\044\117\045\113\046\115\047\120\050\101" +
    "\051\114\052\106\053\121\054\116\055\112\056\107\062" +
    "\102\063\104\001\002\000\014\006\263\034\312\037\262" +
    "\040\267\070\311\001\002\000\004\041\317\001\002\000" +
    "\012\017\146\031\301\042\uffbd\064\uffbd\001\002\000\014" +
    "\006\uffd7\035\uffd7\037\uffd7\040\uffd7\070\uffd7\001\002\000" +
    "\022\006\uffc0\007\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\061\uffc0\070\uffc0\001\002\000\014\006\263\035\uffc7\037" +
    "\262\040\267\070\270\001\002\000\004\035\316\001\002" +
    "\000\022\006\uffc1\007\uffc1\035\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\061\uffc1\070\uffc1\001\002\000\014\006\263\034\312" +
    "\037\262\040\267\070\311\001\002\000\022\006\uffc4\007" +
    "\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\061\uffc4\070\uffc4" +
    "\001\002\000\006\035\uffc8\061\uffc8\001\002\000\004\007" +
    "\323\001\002\000\004\031\324\001\002\000\032\011\065" +
    "\013\060\017\057\031\073\057\061\060\064\065\071\066" +
    "\072\067\062\070\066\071\067\072\063\001\002\000\044" +
    "\010\111\014\105\015\103\032\326\044\117\045\113\046" +
    "\115\047\120\050\101\051\114\052\106\053\121\054\116" +
    "\055\112\056\107\062\102\063\104\001\002\000\004\016" +
    "\327\001\002\000\022\006\uffc5\007\uffc5\035\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\061\uffc5\070\uffc5\001\002\000\032\011" +
    "\065\013\060\017\057\031\073\057\061\060\064\065\071" +
    "\066\072\067\062\070\066\071\067\072\063\001\002\000" +
    "\044\010\111\014\105\015\103\032\332\044\117\045\113" +
    "\046\115\047\120\050\101\051\114\052\106\053\121\054" +
    "\116\055\112\056\107\062\102\063\104\001\002\000\004" +
    "\036\333\001\002\000\014\006\263\034\312\037\262\040" +
    "\267\070\311\001\002\000\022\006\uffc6\007\uffc6\035\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\061\uffc6\070\uffc6\001\002\000" +
    "\022\004\046\005\041\021\035\022\045\023\037\026\040" +
    "\027\042\070\043\001\002\000\006\032\uffe9\033\uffe9\001" +
    "\002\000\004\035\340\001\002\000\004\002\uff95\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\024\003\011\006\020\007\006\010\010\011\012" +
    "\014\007\015\016\016\021\017\015\001\001\000\006\026" +
    "\336\036\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\025\001\001\000\002" +
    "\001\001\000\004\005\026\001\001\000\002\001\001\000" +
    "\004\012\030\001\001\000\004\005\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\035\020\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\067\035\073\001" +
    "\001\000\006\033\201\035\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\160\035\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\143\035\073\001\001\000\002\001\001\000\006\033\141" +
    "\035\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\077\035\073\001\001\000\002" +
    "\001\001\000\006\033\140\035\073\001\001\000\006\033" +
    "\137\035\073\001\001\000\006\033\136\035\073\001\001" +
    "\000\006\033\135\035\073\001\001\000\006\033\134\035" +
    "\073\001\001\000\006\033\133\035\073\001\001\000\006" +
    "\033\132\035\073\001\001\000\002\001\001\000\006\033" +
    "\131\035\073\001\001\000\006\033\130\035\073\001\001" +
    "\000\006\033\127\035\073\001\001\000\006\033\126\035" +
    "\073\001\001\000\006\033\125\035\073\001\001\000\006" +
    "\033\124\035\073\001\001\000\006\033\123\035\073\001" +
    "\001\000\006\033\122\035\073\001\001\000\006\033\121" +
    "\035\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\156\035\073\001" +
    "\001\000\010\033\150\034\147\035\073\001\001\000\002" +
    "\001\001\000\004\037\151\001\001\000\002\001\001\000" +
    "\006\033\153\035\073\001\001\000\004\037\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\173\035\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\206\035\073\001" +
    "\001\000\004\037\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\213\035\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\217\035\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\223\035\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\230\024\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\233\001\001\000\004\024" +
    "\234\001\001\000\002\001\001\000\004\025\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\246\021" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\250\001\001\000\002\001\001\000\006\026\252\036\251" +
    "\001\001\000\002\001\001\000\022\006\272\014\263\015" +
    "\271\016\273\017\270\030\264\031\265\035\274\001\001" +
    "\000\004\027\254\001\001\000\006\033\257\035\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\312\032\321\035\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\320\031\265\035\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\276\035\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\150\034\301\035" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\305\035\073\001\001\000\002\001" +
    "\001\000\010\031\312\032\307\035\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\313\001\001\000" +
    "\002\001\001\000\022\006\272\014\263\015\271\016\273" +
    "\017\270\030\314\031\265\035\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\312\032\317\035\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\324\035\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\330\035\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\312\032\333\035\274\001\001\000" +
    "\002\001\001\000\006\013\335\020\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mainprogram ::= LBRACE block RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exprlist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exprlist ::= COMMA expr exprlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= TUOP TUCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= TUOP expr exprlist TUCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= LSQUARE expr exprlist RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= ID LPAREN actualparam RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= STRVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= CHRVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= FLOATNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= INTNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= LEN LPAREN STRVALUE RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= LEN LPAREN LSQUARE RSQUARE RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= LEN LPAREN LSQUARE expr exprlist RSQUARE RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= LEN LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr CONCAT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr GEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr LEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr GE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr LE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr NOTIN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr IN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr NEQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr EQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr EXP expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr ADD expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var ::= var DOT ID LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var ::= var DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var ::= ID LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actualparam ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualparam",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actualparam ::= expr exprlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualparam",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // body ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // body ::= LBRACE vardeclist stmtlist RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt ::= var ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt ::= ID LPAREN actualparam RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= IF LPAREN expr RPAREN body ELSE body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= REPEAT body UNTIL LPAREN expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= WHILE LPAREN expr RPAREN DO body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtlist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtlist ::= stmt stmtlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // newdatatypedecl ::= ID COLON ID ASSIGN expr exprlist SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newdatatypedecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // newdatatypedecl ::= ID COLON ID SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newdatatypedecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tupletypedecl ::= ID COLON TUPLE ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletypedecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tupletypedecl ::= ID COLON TUPLE SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletypedecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listtypedecl ::= ID COLON LIST ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listtypedecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listtypedecl ::= ID COLON LIST SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listtypedecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // strtypedecl ::= ID COLON STR ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("strtypedecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // strtypedecl ::= ID COLON STR SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("strtypedecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // basictype ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basictype",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // basictype ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basictype",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // basictype ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basictype",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // basictype ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basictype",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // basictypedecl ::= ID COLON basictype ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basictypedecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // basictypedecl ::= ID COLON basictype SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basictypedecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vardeclist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vardeclist ::= vardeclist newdatatypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vardeclist ::= vardeclist tupletypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vardeclist ::= vardeclist strtypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vardeclist ::= vardeclist listtypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vardeclist ::= vardeclist basictypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vardec ::= newdatatypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vardec ::= strtypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vardec ::= tupletypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardec ::= listtypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardec ::= basictypedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= vardeclist stmtlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // returnstmt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnstmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // returnstmt ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnstmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // returnstmt ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnstmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // functionbody ::= LBRACE block returnstmt RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionbody",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramlist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramlist ::= COMMA param paramlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= ID COLON nametype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalparam ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalparam",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalparam ::= param paramlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalparam",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // outtype ::= TUPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outtype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // outtype ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outtype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // outtype ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outtype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // outtype ::= LIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outtype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // outtype ::= STR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outtype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // outtype ::= basictype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("outtype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcdec ::= FDEF ID LPAREN formalparam RPAREN COLON outtype functionbody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcdec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nametype ::= TUPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nametype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nametype ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nametype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nametype ::= LIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nametype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nametype ::= STR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nametype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nametype ::= basictype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nametype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= ID COLON nametype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typedeclist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedeclist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typedeclist ::= COMMA decl typedeclist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedeclist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typedec ::= TDEF ID COLON decl typedeclist SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declist ::= declist vardec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declist ::= declist funcdec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declist ::= declist typedec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declist mainprogram 
            {
              Object RESULT =null;
		 System.out.println("main parsed"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

